"""
This type stub file was generated by pyright.
"""

import pickle
import re
import jieba
from .viterbi import viterbi
from .._compat import *
from .char_state_tab import P as char_state_tab_P
from .prob_start import P as start_P
from .prob_trans import P as trans_P
from .prob_emit import P as emit_P

PROB_START_P = ...
PROB_TRANS_P = ...
PROB_EMIT_P = ...
CHAR_STATE_TAB_P = ...
re_han_detail = ...
re_skip_detail = ...
re_han_internal = ...
re_skip_internal = ...
re_eng = ...
re_num = ...
re_eng1 = ...
def load_model(): # -> tuple[Any, Any, Any, Any]:
    ...

if sys.platform.startswith("java"):
    ...
else:
    ...
class pair:
    def __init__(self, word, flag) -> None:
        ...
    
    def __unicode__(self): # -> LiteralString:
        ...
    
    def __repr__(self): # -> LiteralString:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __iter__(self): # -> Iterator[Any]:
        ...
    
    def __lt__(self, other) -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def encode(self, arg): # -> bytes:
        ...
    


class POSTokenizer:
    def __init__(self, tokenizer=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __getattr__(self, name): # -> Any:
        ...
    
    def initialize(self, dictionary=...): # -> None:
        ...
    
    def load_word_tag(self, f): # -> None:
        ...
    
    def makesure_userdict_loaded(self): # -> None:
        ...
    
    def cut(self, sentence, HMM=...): # -> Generator[pair, Any, None]:
        ...
    
    def lcut(self, *args, **kwargs): # -> list[pair]:
        ...
    


dt = ...
initialize = ...
def cut(sentence, HMM=..., use_paddle=...): # -> Generator[pair | Any, Any, None]:
    """
    Global `cut` function that supports parallel processing.

    Note that this only works using dt, custom POSTokenizer
    instances are not supported.
    """
    ...

def lcut(sentence, HMM=..., use_paddle=...): # -> list[pair | Any]:
    ...

